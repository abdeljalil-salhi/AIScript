generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String        @id @default(uuid())
    avatar       Avatar?
    wallet       Wallet?
    connection   Connection?
    subscription Subscription?
    username     String        @unique
    isAdmin      Boolean       @default(false)
    refreshToken String?
    payments     Payment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

model Connection {
    id              String    @id @default(uuid())
    userId          String    @unique
    email           String    @unique
    password        String?
    isEmailVerified Boolean   @default(false)
    is2faEnabled    Boolean   @default(false)
    provider        String
    otp             String?
    otpCreatedAt    DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("connections")
}

model Avatar {
    id              String @id @default(uuid())
    userId          String @unique
    defaultFilename String
    filename        String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("avatars")
}

model Wallet {
    id                  String @id @default(uuid())
    userId              String @unique
    balance             Int    @default(50)
    freeCredits         Int    @default(50)
    subscriptionCredits Int    @default(0)
    topUpCredits        Int    @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("wallets")
}

model Plan {
    id            String         @id @default(uuid())
    name          String         @unique
    description   String
    price         Float
    duration      Int
    subscriptions Subscription[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("plans")
}

model Payment {
    id             String        @id @default(uuid())
    userId         String        @unique
    amount         Float
    orderId        String        @unique
    paypalSubId    String        @unique
    subscriptionId String
    paymentSource  String
    subscription   Subscription?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("payments")
}

model Subscription {
    id              String  @id @default(uuid())
    userId          String  @unique
    planId          String
    paymentId       String? @unique
    daysWithService Int     @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User     @relation(fields: [userId], references: [id])
    plan    Plan     @relation(fields: [planId], references: [id])
    payment Payment? @relation(fields: [paymentId], references: [id])

    @@map("subscriptions")
}
