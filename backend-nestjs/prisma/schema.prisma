generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String        @id @default(uuid())
    avatar       Avatar?
    wallet       Wallet?
    connection   Connection?
    subscription Subscription?
    username     String        @unique
    isAdmin      Boolean       @default(false)
    refreshToken String?
    payments     Payment[]
    books        Book[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

model Connection {
    id                String             @id @default(uuid())
    userId            String             @unique
    email             String             @unique
    password          String?
    isEmailVerified   Boolean            @default(false)
    emailVerification EmailVerification?
    forgotPassword    ForgotPassword?
    is2faEnabled      Boolean            @default(false)
    provider          String
    otp               String?
    otpCreatedAt      DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("connections")
}

model Avatar {
    id              String @id @default(uuid())
    userId          String @unique
    defaultFilename String
    filename        String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("avatars")
}

model Wallet {
    id                  String @id @default(uuid())
    userId              String @unique
    balance             Int    @default(50)
    freeCredits         Int    @default(50)
    subscriptionCredits Int    @default(0)
    topUpCredits        Int    @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("wallets")
}

model Plan {
    id            String         @id @default(uuid())
    name          String         @unique
    description   String
    credits       Int            @default(0)
    price         Float
    duration      Int
    subscriptions Subscription[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("plans")
}

model Payment {
    id                     String        @id @default(uuid())
    userId                 String
    amount                 Float
    orderId                String        @unique
    paypalSubId            String        @unique
    subscriptionId         String
    paymentSource          String
    facilitatorAccessToken String        @default("")
    subscription           Subscription?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("payments")
}

model Subscription {
    id              String  @id @default(uuid())
    userId          String? @unique
    ownerUserId     String?
    planId          String
    paymentId       String? @unique
    daysWithService Int     @default(0)
    isActive        Boolean @default(true)
    isDeactivated   Boolean @default(false)

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    refreshedAt DateTime @default(now())

    user    User?    @relation(fields: [userId], references: [id])
    plan    Plan     @relation(fields: [planId], references: [id])
    payment Payment? @relation(fields: [paymentId], references: [id])

    @@map("subscriptions")
}

model Data {
    id    String @id @default(uuid())
    key   String @unique
    value String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("data")
}

model EmailVerification {
    id           String @id @default(uuid())
    connectionId String @unique
    email        String @unique
    token        String

    lastSentAt DateTime @default(now())
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    connection Connection @relation(fields: [connectionId], references: [id])

    @@map("email_verifications")
}

model ForgotPassword {
    id           String @id @default(uuid())
    connectionId String @unique
    email        String @unique
    token        String

    lastSentAt DateTime @default(now())
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    connection Connection @relation(fields: [connectionId], references: [id])

    @@map("forgot_passwords")
}

model Book {
    id             String  @id @default(uuid())
    ownerId        String
    author         String
    title          String
    topic          String
    targetAudience String?
    numChapters    Int
    numSubsections Int
    cover          String
    document       String
    pdf            String
    isShowcase     Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    owner User @relation(fields: [ownerId], references: [id])

    @@map("books")
}
