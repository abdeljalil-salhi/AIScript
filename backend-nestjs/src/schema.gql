# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  """Access token of the user"""
  accessToken: String!

  """Whether 2FA is enabled"""
  is2faEnabled: Boolean!

  """Refresh token of the user"""
  refreshToken: String!

  """Short lived token of the user"""
  shortLivedToken: String

  """User details"""
  user: User!
}

type Avatar {
  """Date and time of the avatar creation"""
  createdAt: DateTime!

  """Default file name of the avatar"""
  defaultFilename: String!

  """File name of the avatar"""
  filename: String!

  """Unique identifier of the avatar"""
  id: String!

  """Date and time of the avatar last update"""
  updatedAt: DateTime!

  """Avatar associated user entity"""
  user: User

  """ID of the associated user that owns the avatar"""
  userId: String!
}

input ChangePasswordInput {
  """Confirm password for the user"""
  confirmPassword: String!

  """New password for the user"""
  newPassword: String!

  """Old password of the user"""
  oldPassword: String!

  """ID of the user requesting the password change"""
  userId: String!
}

type Connection {
  """Date and time of the connection creation"""
  createdAt: DateTime!

  """Email of the connection"""
  email: String!

  """Unique identifier of the connection"""
  id: String!

  """Indicates whether 2FA is enabled for the connection"""
  is2faEnabled: Boolean!

  """Indicates whether email is verified for the connection"""
  isEmailVerified: Boolean!

  """One-time password associated with the connection"""
  otp: String

  """The date and time when the connection one-time password was created"""
  otpCreatedAt: DateTime

  """Password of the connection"""
  password: String

  """Provider of the connection"""
  provider: String!

  """Date and time of the connection last update"""
  updatedAt: DateTime!

  """Connection associated user entity"""
  user: User

  """ID of the associated user that owns the connection"""
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EmailVerification {
  """Email verification associated connection entity"""
  connection: Connection

  """ID of the associated connection"""
  connectionId: String!

  """Verification token creation date"""
  createdAt: DateTime

  """Email address to verify"""
  email: String!

  """Verification token expiration date"""
  expiresAt: DateTime!

  """Unique identifier of the email verification"""
  id: String!

  """Verification token last sent at"""
  lastSentAt: DateTime!

  """Verification token"""
  token: String!

  """Verification token update date"""
  updatedAt: DateTime!
}

type ForgotPassword {
  """Forgot password associated connection entity"""
  connection: Connection

  """ID of the associated connection"""
  connectionId: String!

  """Creation date of the password reset token"""
  createdAt: DateTime!

  """Email address of the account requesting the password reset"""
  email: String!

  """Expiration date of the password reset token"""
  expiresAt: DateTime!

  """Unique identifier of the forgot password"""
  id: String!

  """Date the reset token was last sent"""
  lastSentAt: DateTime!

  """Reset token"""
  token: String!

  """Update date of the password reset token"""
  updatedAt: DateTime!
}

input LoginInput {
  """Password of the user"""
  password: String!

  """Username or email of the user"""
  usernameOrEmail: String!
}

input LoginTwoFactorAuthenticationInput {
  """
  The two-factor authentication one-time password (OTP) entered by the user
  """
  otp: String!

  """The ID of the user to log in with two-factor authentication"""
  userId: String!
}

type LogoutResponse {
  """Indicates whether the user has been successfully logged out."""
  isLoggedOut: Boolean!
}

type MeResponse {
  """User details"""
  user: User!
}

type Mutation {
  """Cancels a subscription entity by ID."""
  cancelSubscription(subscriptionId: String!): Subscription!

  """Changes the password of the current user."""
  changePassword(changePasswordInput: ChangePasswordInput!): String!

  """Creates the predefined plans in the database."""
  createPlans: [Plan!]!

  """Creates a new subscription entity."""
  createSubscription(newSubscriptionInput: NewSubscriptionInput!): Subscription!

  """Deletes all plans from the database."""
  deleteAllPlans: [Plan!]!

  """Deletes a plan by its ID."""
  deletePlan(planId: String!): Plan!

  """Deletes a subscription entity by ID."""
  deleteSubscriptionById(subscriptionId: String!): Subscription!

  """Deletes all subscription entities for a specific user."""
  deleteSubscriptionsByUserId(userId: String!): [Subscription!]!

  """Disables two-factor authentication for the current user."""
  disableTwoFactorAuthentication(otp: String!, userId: String!): TwoFactorAuthentication!

  """Enables two-factor authentication for the current user."""
  enableTwoFactorAuthentication(otp: String!, userId: String!): TwoFactorAuthentication!

  """Verifies the forgot password token and updates the user password."""
  forgotPassword(verifyForgotPasswordInput: VerifyForgotPasswordInput!): AuthResponse!

  """
  Generates a two-factor authentication secret and OTP authentication URI for a user.
  """
  generateTwoFactorAuthenticationSecret(userId: String!, username: String!): TwoFactorAuthentication!

  """Logs in a user with the specified details."""
  login(loginInput: LoginInput!): AuthResponse!

  """Logs in a user with two-factor authentication."""
  loginTwoFactorAuthentication(loginTwoFactorAuthenticationInput: LoginTwoFactorAuthenticationInput!): AuthResponse!

  """Logs out a user with the specified user ID."""
  logout: LogoutResponse!

  """Generates new access and refresh tokens for a user."""
  refresh: NewTokensResponse!

  """Refreshes all subscriptions credits."""
  refreshSubscriptionsCredits: String!

  """Registers a new user with the specified details."""
  register(registerInput: RegisterInput!): AuthResponse!

  """Requests an email verification for the specified email."""
  requestEmailVerification(requestEmailVerificationInput: RequestEmailVerificationInput!): EmailVerification!

  """Requests a forgot password token for the specified email."""
  requestForgotPassword(requestForgotPasswordInput: RequestForgotPasswordInput!): ForgotPassword!

  """Creates a new payment entity while subscribing to a plan."""
  subscribe(subscribeInput: SubscribeInput!): Payment!

  """Updates a plan by its ID."""
  updatePlan(planId: String!, updatePlanInput: UpdatePlanInput!): Plan!

  """Update a user by their ID"""
  updateUser(updateUserInput: UpdateUserInput!): User!

  """Validates all subscriptions."""
  validateSubscriptions: String!

  """Verifies the email verification with the specified token."""
  verifyEmail(token: String!): String!

  """Verifies the password of the current user."""
  verifyPassword(password: String!): Boolean!

  """Verifies a two-factor authentication one-time password."""
  verifyTwoFactorAuthentication(otp: String!, userId: String!): TwoFactorAuthentication!
}

input NewSubscriptionInput {
  """ID of the payment that created the subscription"""
  paymentId: String!

  """ID of the subscription plan"""
  planId: String!

  """ID of the associated user that owns the subscription"""
  userId: String!
}

type NewTokensResponse {
  """JSON Web Token (JWT) access token used for authorization and access"""
  accessToken: String!

  """
  Token for refreshing the JSON Web Token (JWT) access token when it expires
  """
  refreshToken: String!
}

type Payment {
  """Amount of the payment"""
  amount: Float!

  """Date and time of the payment creation"""
  createdAt: DateTime!

  """Facilitator access token of the payment"""
  facilitatorAccessToken: String!

  """Unique identifier of the payment"""
  id: String!

  """Order ID of the payment"""
  orderId: String!

  """Source of the payment"""
  paymentSource: String!

  """PayPal subscription ID of the payment"""
  paypalSubId: String!

  """Payment associated subscription entity"""
  subscription: String

  """Subscription ID of the payment"""
  subscriptionId: String!

  """Date and time of the payment last update"""
  updatedAt: DateTime!

  """Payment associated user entity"""
  user: User

  """ID of the associated user that owns the payment"""
  userId: String!
}

type Plan {
  """Date and time of the plan creation"""
  createdAt: DateTime!

  """Number of credits given by the plan"""
  credits: Float!

  """Description of the plan"""
  description: String!

  """Duration of the plan"""
  duration: Float!

  """Unique identifier of the plan"""
  id: String!

  """Name of the plan"""
  name: String!

  """Price of the plan"""
  price: Float!

  """Date and time of the plan last update"""
  updatedAt: DateTime!
}

type Query {
  """Gets all the available plans."""
  getAllPlans: [Plan!]!

  """Retrieves all subscription entities."""
  getAllSubscriptions: [Subscription!]!

  """Gets a plan by its ID."""
  getPlanById(planId: String!): Plan!

  """Retrieves a single subscription entity by ID."""
  getSubscriptionById(subscriptionId: String!): Subscription!

  """Retrieves all subscription entities for a specific plan."""
  getSubscriptionsByPlanId(planId: String!): [Subscription!]!

  """Retrieves all subscription entities for a specific user."""
  getSubscriptionsByUserId(userId: String!): [Subscription!]!

  """Returns the currently authenticated user."""
  me: MeResponse!
}

input RegisterInput {
  """Email of the user"""
  email: String!

  """Filename of the avatar"""
  filename: String!

  """Password of the user"""
  password: String!

  """Username of the user"""
  username: String!
}

input RequestEmailVerificationInput {
  """ID of the connection requesting the email verification"""
  connectionId: String!

  """Email of the user requesting the email verification"""
  email: String!

  """ID of the user requesting the email verification"""
  userId: String!
}

input RequestForgotPasswordInput {
  """Email of the user requesting the password reset"""
  email: String!
}

input SubscribeInput {
  """Amount of the payment"""
  amount: Float!

  """Access token of the payment facilitator"""
  facilitatorAccessToken: String!

  """Order ID of the payment"""
  orderId: String!

  """Source of the payment"""
  paymentSource: String!

  """PayPal subscription ID of the payment"""
  paypalSubId: String!

  """ID of the associated plan that the payment is for"""
  planId: String!

  """ID of the associated user that owns the payment"""
  userId: String!
}

type Subscription {
  """Date and time of the subscription creation"""
  createdAt: DateTime!

  """Number of days with service ongoing"""
  daysWithService: Float!

  """Unique identifier of the subscription"""
  id: String!

  """Subscription is active"""
  isActive: Boolean!

  """Subscription is deactivated"""
  isDeactivated: Boolean!

  """ID of the owner user that owns the subscription"""
  ownerUserId: String

  """Subscription associated payment entity"""
  payment: Payment

  """ID of the associated payment that owns the subscription"""
  paymentId: String!

  """Subscription associated plan entity"""
  plan: Plan

  """ID of the subscription plan"""
  planId: String!

  """Date and time of the subscription last refresh"""
  refreshedAt: DateTime!

  """Date and time of the subscription last update"""
  updatedAt: DateTime!

  """Subscription associated user entity"""
  user: User

  """ID of the associated user that owns the subscription"""
  userId: String
}

type TwoFactorAuthentication {
  """The associated connection entity"""
  connection: Connection

  """The two-factor authentication (2FA) validation status"""
  is2faValid: Boolean

  """The one-time password authentication URI"""
  otpAuthUri: String

  """The two-factor authentication (2FA) status"""
  status: String
}

input UpdatePlanInput {
  """Plan description"""
  description: String

  """Plan duration"""
  duration: Int

  """Plan name"""
  name: String

  """Plan price"""
  price: Int
}

input UpdateUserInput {
  """The new email of the user"""
  email: String

  """The ID of the user to update"""
  userId: String!

  """The new username of the user"""
  username: String
}

type User {
  """User associated avatar entity"""
  avatar: Avatar

  """User associated connection entity"""
  connection: Connection

  """Date and time of the user creation"""
  createdAt: DateTime!

  """Unique identifier of the user"""
  id: String!

  """Indicates whether the user is an admin"""
  isAdmin: Boolean!

  """Refresh token of the user"""
  refreshToken: String

  """User associated subscription entity"""
  subscription: Subscription

  """Date and time of the user last update"""
  updatedAt: DateTime!

  """Username of the user"""
  username: String!

  """User associated wallet entity"""
  wallet: Wallet
}

input VerifyForgotPasswordInput {
  """New password confirmation for the user"""
  confirmPassword: String!

  """Email of the user changing the password"""
  email: String!

  """New password for the user"""
  password: String!

  """Token for the forgot password reset"""
  token: String!
}

type Wallet {
  """Balance of the wallet"""
  balance: Float!

  """Date and time of the wallet creation"""
  createdAt: DateTime!

  """Number of free credits available in the wallet"""
  freeCredits: Float!

  """Unique identifier of the wallet"""
  id: String!

  """Number of subscription credits available in the wallet"""
  subscriptionCredits: Float!

  """Number of top-up credits available in the wallet"""
  topUpCredits: Float!

  """Date and time of the wallet last update"""
  updatedAt: DateTime!

  """Wallet associated user entity"""
  user: User

  """ID of the associated user that owns the wallet"""
  userId: String!
}